}
}
cprob = count1/500 #coverage probability
barplot(cprob,names.arg = size,ylim = c(0,1), xlab="Sample Size",ylab="Coverage Probability",col="blue",main="Coverage Probability of Confidence Intervals",border="red")
cprob
count1 = c(0,0,0,0,0) #Initializing frequency for inclusion of true mean
for(i in 1:5){
for(j in 1:iter){
count1[i] = count1[i] + coverage_freq(0.1,0.1,0.05,size[i])
}
}
cprob = count1/500 #coverage probability
cprob
size = c(100,500,1000,5000,10000) #Sample sizes
iter = 500 #Number of iterations
coverage_freq = function(shape, scale, alpha, n1){#function for getting coverage probability
samp = rgamma(n1, shape, scale) #n1 samples generated from Gamma(shape, scale)
bar_x = mean(samp) #sample mean
count=0
s = var(samp)  #sample variance
low_lim = bar_x - qnorm(1-0.05/2)*sqrt(s)/sqrt(n1) #lower limit of CI
up_lim = bar_x + qnorm(1-0.05/2)*sqrt(s)/sqrt(n1); low_lim; up_lim  #upper limit of CI
m = shape*scale #True mean
count = 0 #countar variable for mean inside CI
if(m >= low_lim & m <= up_lim){
count = count + 1
}
return(count)
}
count1 = c(0,0,0,0,0) #Initializing frequency for inclusion of true mean
for(i in 1:5){
for(j in 1:iter){
count1[i] = count1[i] + coverage_freq(0.1,0.1,0.05,size[i])
}
}
cprob = count1/500 #coverage probability
barplot(cprob,names.arg = size,ylim = c(0,1), xlab="Sample Size",ylab="Coverage Probability",col="blue",main="Coverage Probability of Confidence Intervals",border="red")
size = c(100,500,1000,5000,10000) #Sample sizes
iter = 500 #Number of iterations
coverage_freq = function(shape, scale, alpha, n1){#function for getting coverage probability
samp = rgamma(n1, shape, scale) #n1 samples generated from Gamma(shape, scale)
bar_x = mean(samp) #sample mean
s = var(samp)  #sample variance
low_lim = bar_x - qnorm(1-0.05/2)*sqrt(s)/sqrt(n1) #lower limit of CI
up_lim = bar_x + qnorm(1-0.05/2)*sqrt(s)/sqrt(n1); low_lim; up_lim  #upper limit of CI
m = shape*scale #True mean
count = 0 #countar variable for mean inside CI
if(m >= low_lim & m <= up_lim){
count = 1
}
return(count)
}
count1 = c(0,0,0,0,0) #Initializing frequency for inclusion of true mean
for(i in 1:5){
for(j in 1:iter){
count1[i] = count1[i] + coverage_freq(0.1,0.1,0.05,size[i])
}
}
cprob = count1/500 #coverage probability
barplot(cprob,names.arg = size,ylim = c(0,1), xlab="Sample Size",ylab="Coverage Probability",col="blue",main="Coverage Probability of Confidence Intervals",border="red")
cprob
m = shape*scale #True mean
m = shape/scale #True mean
size = c(100,500,1000,5000,10000) #Sample sizes
iter = 500 #Number of iterations
coverage_freq = function(shape, scale, alpha, n1){#function for getting coverage probability
samp = rgamma(n1, shape, scale) #n1 samples generated from Gamma(shape, scale)
bar_x = mean(samp) #sample mean
s = var(samp)  #sample variance
low_lim = bar_x - qnorm(1-0.05/2)*sqrt(s)/sqrt(n1) #lower limit of CI
up_lim = bar_x + qnorm(1-0.05/2)*sqrt(s)/sqrt(n1); low_lim; up_lim  #upper limit of CI
m = shape/scale #True mean
count = 0 #countar variable for mean inside CI
if(m >= low_lim & m <= up_lim){
count = 1
}
return(count)
}
count1 = c(0,0,0,0,0) #Initializing frequency for inclusion of true mean
for(i in 1:5){
for(j in 1:iter){
count1[i] = count1[i] + coverage_freq(0.1,0.1,0.05,size[i])
}
}
cprob = count1/500 #coverage probability
barplot(cprob,names.arg = size,ylim = c(0,1), xlab="Sample Size",ylab="Coverage Probability",col="blue",main="Coverage Probability of Confidence Intervals",border="red")
m
cprob
size = c(100,500,1000,5000,10000) #Sample sizes
iter = 500 #Number of iterations
coverage_freq = function(shape, scale, alpha, n1){#function for getting coverage probability
samp = rgamma(n1, shape, scale) #n1 samples generated from Gamma(shape, scale)
bar_x = mean(samp) #sample mean
s = var(samp)  #sample variance
low_lim = bar_x - qnorm(1-0.05/2)*sqrt(s)/sqrt(n1) #lower limit of CI
up_lim = bar_x + qnorm(1-0.05/2)*sqrt(s)/sqrt(n1); low_lim; up_lim  #upper limit of CI
m = shape/scale #True mean
count = 0 #countar variable for mean inside CI
if(m >= low_lim & m <= up_lim){
count = 1
}
return(count)
}
count1 = c(0,0,0,0,0) #Initializing frequency for inclusion of true mean
for(i in 1:5){
for(j in 1:iter){
count1[i] = count1[i] + coverage_freq(0.01,0.01,0.05,size[i])
}
}
cprob = count1/500 #coverage probability
barplot(cprob,names.arg = size,ylim = c(0,1), xlab="Sample Size",ylab="Coverage Probability",col="blue",main="Coverage Probability of Confidence Intervals",border="red")
size = c(100,500,1000,5000,10000) #Sample sizes
iter = 500 #Number of iterations
coverage_freq = function(shape, scale, alpha, n1){#function for getting coverage probability
samp = rgamma(n1, shape, scale) #n1 samples generated from Gamma(shape, scale)
bar_x = mean(samp) #sample mean
s = var(samp)  #sample variance
low_lim = bar_x - qnorm(1-0.05/2)*sqrt(s)/sqrt(n1) #lower limit of CI
up_lim = bar_x + qnorm(1-0.05/2)*sqrt(s)/sqrt(n1); low_lim; up_lim  #upper limit of CI
m = shape*scale #True mean
count = 0 #countar variable for mean inside CI
if(m >= low_lim & m <= up_lim){
count = 1
}
return(count)
}
count1 = c(0,0,0,0,0) #Initializing frequency for inclusion of true mean
for(i in 1:5){
for(j in 1:iter){
count1[i] = count1[i] + coverage_freq(0.01,0.01,0.05,size[i])
}
}
cprob = count1/500 #coverage probability
barplot(cprob,names.arg = size,ylim = c(0,1), xlab="Sample Size",ylab="Coverage Probability",col="blue",main="Coverage Probability of Confidence Intervals",border="red")
size = c(100,500,1000,5000,10000) #Sample sizes
iter = 500 #Number of iterations
coverage_freq = function(shape, scale, alpha, n1){#function for getting coverage probability
samp = rgamma(n1,shape= shape, scale=scale) #n1 samples generated from Gamma(shape, scale)
bar_x = mean(samp) #sample mean
s = var(samp)  #sample variance
low_lim = bar_x - qnorm(1-0.05/2)*sqrt(s)/sqrt(n1) #lower limit of CI
up_lim = bar_x + qnorm(1-0.05/2)*sqrt(s)/sqrt(n1); low_lim; up_lim  #upper limit of CI
m = shape*scale #True mean
count = 0 #countar variable for mean inside CI
if(m >= low_lim & m <= up_lim){
count = 1
}
return(count)
}
count1 = c(0,0,0,0,0) #Initializing frequency for inclusion of true mean
for(i in 1:5){
for(j in 1:iter){
count1[i] = count1[i] + coverage_freq(0.01,0.01,0.05,size[i])
}
}
cprob = count1/500 #coverage probability
barplot(cprob,names.arg = size,ylim = c(0,1), xlab="Sample Size",ylab="Coverage Probability",col="blue",main="Coverage Probability of Confidence Intervals",border="red")
size = c(100,500,1000,5000,10000) #Sample sizes
iter = 500 #Number of iterations
coverage_freq = function(shape, scale, alpha, n1){#function for getting coverage probability
samp = rgamma(n1,shape= shape, scale=scale) #n1 samples generated from Gamma(shape, scale)
bar_x = mean(samp) #sample mean
s = var(samp)  #sample variance
low_lim = bar_x - qnorm(1-0.05/2)*sqrt(s)/sqrt(n1) #lower limit of CI
up_lim = bar_x + qnorm(1-0.05/2)*sqrt(s)/sqrt(n1); low_lim; up_lim  #upper limit of CI
m = shape*scale #True mean
count = 0 #countar variable for mean inside CI
if(m >= low_lim & m <= up_lim){
count = 1
}
return(count)
}
count1 = c(0,0,0,0,0) #Initializing frequency for inclusion of true mean
for(i in 1:5){
for(j in 1:iter){
count1[i] = count1[i] + coverage_freq(0.01,0.01,0.05,size[i])
}
}
cprob = count1/500 #coverage probability
barplot(cprob,names.arg = size,ylim = c(0,1), xlab="Sample Size",ylab="Coverage Probability",col="blue",main="Coverage Probability of Confidence Intervals",border="red")
size = c(100,500,1000,5000,10000) #Sample sizes
iter = 500 #Number of iterations
coverage_freq = function(shape, scale, alpha, n1){#function for getting coverage probability
samp = rgamma(n1,shape= shape, scale=scale) #n1 samples generated from Gamma(shape, scale)
bar_x = mean(samp) #sample mean
s = var(samp)  #sample variance
low_lim = bar_x - qnorm(1-0.05/2)*sqrt(s)/sqrt(n1) #lower limit of CI
up_lim = bar_x + qnorm(1-0.05/2)*sqrt(s)/sqrt(n1); low_lim; up_lim  #upper limit of CI
m = shape*scale #True mean
count = 0 #countar variable for mean inside CI
if(m >= low_lim & m <= up_lim){
count = 1
}
return(count)
}
count1 = c(0,0,0,0,0) #Initializing frequency for inclusion of true mean
for(i in 1:5){
for(j in 1:iter){
count1[i] = count1[i] + coverage_freq(0.01,0.01,0.05,size[i])
}
}
cprob = count1/500 #coverage probability
barplot(cprob,names.arg = size,ylim = c(0,1), xlab="Sample Size",ylab="Coverage Probability",col="blue",main="Coverage Probability of Confidence Intervals",border="red")
size = c(100,500,1000,5000,10000) #Sample sizes
iter = 500 #Number of iterations
coverage_freq = function(shape, scale, alpha, n1){#function for getting coverage probability
samp = rgamma(n1,shape= shape, scale=scale) #n1 samples generated from Gamma(shape, scale)
bar_x = mean(samp) #sample mean
s = var(samp)  #sample variance
low_lim = bar_x - qnorm(1-0.05/2)*sqrt(s)/sqrt(n1) #lower limit of CI
up_lim = bar_x + qnorm(1-0.05/2)*sqrt(s)/sqrt(n1); low_lim; up_lim  #upper limit of CI
m = shape*scale #True mean
count = 0 #countar variable for mean inside CI
if(m >= low_lim & m <= up_lim){
count = 1
}
return(count)
}
count1 = c(0,0,0,0,0) #Initializing frequency for inclusion of true mean
for(i in 1:5){
for(j in 1:iter){
count1[i] = count1[i] + coverage_freq(0.01,0.01,0.05,size[i])
}
}
cprob = count1/500 #coverage probability
barplot(cprob,names.arg = size,ylim = c(0,1), xlab="Sample Size",ylab="Coverage Probability",col="blue",main="Coverage Probability of Confidence Intervals",border="red")
size = c(100,500,1000,5000,10000) #Sample sizes
iter = 500 #Number of iterations
coverage_freq = function(shape, scale, alpha, n1){#function for getting coverage probability
samp = rgamma(n1,shape= shape, scale=scale) #n1 samples generated from Gamma(shape, scale)
bar_x = mean(samp) #sample mean
s = var(samp)  #sample variance
low_lim = bar_x - qnorm(1-0.05/2)*sqrt(s)/sqrt(n1) #lower limit of CI
up_lim = bar_x + qnorm(1-0.05/2)*sqrt(s)/sqrt(n1); low_lim; up_lim  #upper limit of CI
m = shape*scale #True mean
count = 0 #countar variable for mean inside CI
if(m >= low_lim & m <= up_lim){
count = 1
}
return(count)
}
count1 = c(0,0,0,0,0) #Initializing frequency for inclusion of true mean
for(i in 1:5){
for(j in 1:iter){
count1[i] = count1[i] + coverage_freq(0.01,0.01,0.05,size[i])
}
}
cprob = count1/500 #coverage probability
barplot(cprob,names.arg = size,ylim = c(0,1), xlab="Sample Size",ylab="Coverage Probability",col="blue",main="Coverage Probability of Confidence Intervals",border="red")
size = c(100,500,1000,5000,10000) #Sample sizes
iter = 500 #Number of iterations
coverage_freq = function(shape, scale, alpha, n1){#function for getting coverage probability
samp = rgamma(n1,shape= shape, scale=scale) #n1 samples generated from Gamma(shape, scale)
bar_x = mean(samp) #sample mean
s = var(samp)  #sample variance
low_lim = bar_x - qnorm(1-0.05/2)*sqrt(s)/sqrt(n1) #lower limit of CI
up_lim = bar_x + qnorm(1-0.05/2)*sqrt(s)/sqrt(n1); low_lim; up_lim  #upper limit of CI
m = shape*scale #True mean
count = 0 #countar variable for mean inside CI
if(m >= low_lim & m <= up_lim){
count = 1
}
return(count)
}
count1 = c(0,0,0,0,0) #Initializing frequency for inclusion of true mean
for(i in 1:5){
for(j in 1:iter){
count1[i] = count1[i] + coverage_freq(0.01,0.01,0.05,size[i])
}
}
cprob = count1/500 #coverage probability
barplot(cprob,names.arg = size,ylim = c(0,1), xlab="Sample Size",ylab="Coverage Probability",col="blue",main="Coverage Probability of Confidence Intervals",border="red")
library(MASS)
Cov = matrix(0,nrow = 10, ncol = 10) #Initializing covariance matrix
alpha = 0.9 #multiplier
p = 10 #dimension
rho = 0.75 #correlation
for(i in 1:p){
for(j in 1:p){
Cov[i,j] = rho^abs(i-j)
}
}
mean = rep(0,10) #mean of error
n = 1000 #sample size
Process = function(multiplier, mean, Var, dimension, size){ #Function producing process
vec = matrix(0, nrow = p, ncol = n) #Initializing vectors
Y = numeric(0)
Y[1] = 0
for(i in 2:n){#Generating Auto-regressive Process
vec[,i] = multiplier*vec[,i-1] + mvrnorm(1,mean,Var)
Y[i] = sum(vec[,i])
}
return(Y)
}
#Plotting sum of elements of random vectors
plot.ts(Process(0.9,mean,Cov,p,n), ylab = "Sum of process components", main = "Trace Plot")
c(100, 100, 100)/c(2, 5, 10)
rgamma(1e4 ,shape= 0.01, scale= 0.01)
mean(rgamma(1e4 ,shape= 0.01, scale= 0.01))
mean(rgamma(1e4 ,shape= 0.01, rate= 0.01))
#The distribution under study is Gamma(0.1, 0.1).
size = c(100,500,1000,5000,10000) #Sample sizes
iter = 500 #Number of iterations
coverage_freq = function(shape, rate, alpha){#function for getting coverage probability
samp = mean(rgamma(1e4 ,shape= shape, rate= rate)) #n1 samples generated from Gamma(shape, scale)
bar_x = c(mean(samp[1:1e2]),mean(samp[1:5e2]),mean(samp[1:1e3]),mean(samp[1:5e3]),mean(samp[1:1e4])) #sample mean
s2 = c(var(samp[1:1e2]), var(samp[1:5e2]), var(samp[1:1e3]),var(samp[1:5e3]),var(samp[1:1e4])) #sample variance
low_lim = bar_x - qnorm(1 - alpha/2)*sqrt(s2/size) #lower limit of CI
up_lim = bar_x + qnorm(1 - alpha/2)*sqrt(s2/size); #upper limit of CI
m = shape/rate #True mean
count = c(0,0,0,0,0) #countar variable for mean inside CI
for(i in 1:5){
if(m >= low_lim[i] & m <= up_lim[i]){
count[i] = 1
}
}
return(count)
}
count1 = c(0,0,0,0,0) #Initializing frequency for inclusion of true mean
for(j in 1:iter){
count1 = count1 + coverage_freq(0.01,0.01,0.05)/iter
}
size = c(100,500,1000,5000,10000) #Sample sizes
iter = 500 #Number of iterations
coverage_freq = function(shape, rate, alpha){#function for getting coverage probability
samp = rgamma(1e4 ,shape= shape, rate= rate) #n1 samples generated from Gamma(shape, scale)
bar_x = c(mean(samp[1:1e2]),mean(samp[1:5e2]),mean(samp[1:1e3]),mean(samp[1:5e3]),mean(samp[1:1e4])) #sample mean
s2 = c(var(samp[1:1e2]), var(samp[1:5e2]), var(samp[1:1e3]),var(samp[1:5e3]),var(samp[1:1e4])) #sample variance
low_lim = bar_x - qnorm(1 - alpha/2)*sqrt(s2/size) #lower limit of CI
up_lim = bar_x + qnorm(1 - alpha/2)*sqrt(s2/size); #upper limit of CI
m = shape/rate #True mean
count = c(0,0,0,0,0) #countar variable for mean inside CI
for(i in 1:5){
if(m >= low_lim[i] & m <= up_lim[i]){
count[i] = 1
}
}
return(count)
}
count1 = c(0,0,0,0,0) #Initializing frequency for inclusion of true mean
for(j in 1:iter){
count1 = count1 + coverage_freq(0.01,0.01,0.05)/iter
}
barplot(count1,names.arg = size,ylim = c(0,1), xlab="Sample Size",ylab="Coverage Probability",col="blue",main="Coverage Probability of Confidence Intervals",border="red")
#The distribution under study is Gamma(0.1, 0.1).
size = c(100,500,1000,5000,10000) #Sample sizes
iter = 500 #Number of iterations
coverage_freq = function(shape, rate, alpha){#function for getting coverage probability
samp = rgamma(1e4 ,shape= shape, rate= rate) #n1 samples generated from Gamma(shape, scale)
bar_x = c(mean(samp[1:1e2]),mean(samp[1:5e2]),mean(samp[1:1e3]),mean(samp[1:5e3]),mean(samp[1:1e4])) #sample mean
s2 = c(var(samp[1:1e2]), var(samp[1:5e2]), var(samp[1:1e3]),var(samp[1:5e3]),var(samp[1:1e4])) #sample variance
low_lim = bar_x - qnorm(1 - alpha/2)*sqrt(s2/size) #lower limit of CI
up_lim = bar_x + qnorm(1 - alpha/2)*sqrt(s2/size); #upper limit of CI
m = shape/rate #True mean
count = c(0,0,0,0,0) #countar variable for mean inside CI
for(i in 1:5){
if(m >= low_lim[i] & m <= up_lim[i]){
count[i] = 1
}
}
return(count)
}
count1 = c(0,0,0,0,0) #Initializing frequency for inclusion of true mean
for(j in 1:iter){
count1 = count1 + coverage_freq(0.01,0.01,0.05)/iter
}
barplot(count1,names.arg = size,ylim = c(0,1), xlab="Sample Size",ylab="Coverage Probability",col="blue",main="Coverage Probability of Confidence Intervals",border="red")
#The distribution under study is Gamma(0.1, 0.1).
size = c(100,500,1000,5000,10000) #Sample sizes
iter = 500 #Number of iterations
coverage_freq = function(shape, rate, alpha){#function for getting coverage probability
samp = rgamma(1e4 ,shape= shape, rate= rate) #n1 samples generated from Gamma(shape, scale)
bar_x = c(mean(samp[1:1e2]),mean(samp[1:5e2]),mean(samp[1:1e3]),mean(samp[1:5e3]),mean(samp[1:1e4])) #sample mean
s2 = c(var(samp[1:1e2]), var(samp[1:5e2]), var(samp[1:1e3]),var(samp[1:5e3]),var(samp[1:1e4])) #sample variance
low_lim = bar_x - qnorm(1 - alpha/2)*sqrt(s2/size) #lower limit of CI
up_lim = bar_x + qnorm(1 - alpha/2)*sqrt(s2/size); #upper limit of CI
m = shape/rate #True mean
count = c(0,0,0,0,0) #countar variable for mean inside CI
for(i in 1:5){
if(m >= low_lim[i] & m <= up_lim[i]){
count[i] = 1
}
}
return(count)
}
count1 = c(0,0,0,0,0) #Initializing frequency for inclusion of true mean
for(j in 1:iter){
count1 = count1 + coverage_freq(0.01,0.01,0.05)/iter
}
barplot(count1,names.arg = size,ylim = c(0,1), xlab="Sample Size",ylab="Coverage Probability",col="blue",main="Coverage Probability of Confidence Intervals",border="red")
#The distribution under study is Gamma(0.1, 0.1).
size = c(100,500,1000,5000,10000) #Sample sizes
iter = 500 #Number of iterations
coverage_freq = function(shape, rate, alpha){#function for getting coverage probability
samp = rgamma(1e4 ,shape= shape, rate= rate) #n1 samples generated from Gamma(shape, scale)
bar_x = c(mean(samp[1:1e2]),mean(samp[1:5e2]),mean(samp[1:1e3]),mean(samp[1:5e3]),mean(samp[1:1e4])) #sample mean
s2 = c(var(samp[1:1e2]), var(samp[1:5e2]), var(samp[1:1e3]),var(samp[1:5e3]),var(samp[1:1e4])) #sample variance
low_lim = bar_x - qnorm(1 - alpha/2)*sqrt(s2/size) #lower limit of CI
up_lim = bar_x + qnorm(1 - alpha/2)*sqrt(s2/size); #upper limit of CI
m = shape/rate #True mean
count = c(0,0,0,0,0) #countar variable for mean inside CI
for(i in 1:5){
if(m >= low_lim[i] & m <= up_lim[i]){
count[i] = 1
}
}
return(count)
}
count1 = c(0,0,0,0,0) #Initializing frequency for inclusion of true mean
for(j in 1:iter){
count1 = count1 + coverage_freq(0.01,0.01,0.05)/iter
}
barplot(count1,names.arg = size,ylim = c(0,1), xlab="Sample Size",ylab="Coverage Probability",col="blue",main="Coverage Probability of Confidence Intervals",border="red")
#The distribution under study is Gamma(0.1, 0.1).
size = c(100,500,1000,5000,10000) #Sample sizes
iter = 500 #Number of iterations
coverage_freq = function(shape, rate, alpha){#function for getting coverage probability
samp = rgamma(1e4 ,shape= shape, rate= rate) #n1 samples generated from Gamma(shape, scale)
bar_x = c(mean(samp[1:1e2]),mean(samp[1:5e2]),mean(samp[1:1e3]),mean(samp[1:5e3]),mean(samp[1:1e4])) #sample mean
s2 = c(var(samp[1:1e2]), var(samp[1:5e2]), var(samp[1:1e3]),var(samp[1:5e3]),var(samp[1:1e4])) #sample variance
low_lim = bar_x - qnorm(1 - alpha/2)*sqrt(s2/size) #lower limit of CI
up_lim = bar_x + qnorm(1 - alpha/2)*sqrt(s2/size); #upper limit of CI
m = shape/rate #True mean
count = c(0,0,0,0,0) #countar variable for mean inside CI
for(i in 1:5){
if(m >= low_lim[i] & m <= up_lim[i]){
count[i] = 1
}
}
return(count)
}
prob1 = c(0,0,0,0,0) #Initializing relative frequency for inclusion of true mean
for(j in 1:iter){
prob1 = prob1 + coverage_freq(0.01,0.01,0.05)/iter
}
#bar diagram for
barplot(prob1,names.arg = size,ylim = c(0,1), xlab="Sample Size",ylab="Coverage Probability",col="blue",main="Coverage Probability of Confidence Intervals",border="red")
library(MASS)
Cov = matrix(0,nrow = 10, ncol = 10) #Initializing covariance matrix
alpha = 0.9 #multiplier
p = 10 #dimension
rho = 0.75 #correlation
for(i in 1:p){
for(j in 1:p){
Cov[i,j] = rho^abs(i-j)
}
}
mean = rep(0,10) #mean of error
n = 1000 #sample size
Process = function(multiplier, mean, Var, dimension, size){ #Function producing process
vec = matrix(0, nrow = p, ncol = n) #Initializing vectors
Y = numeric(0)
Y[1] = 0
for(i in 2:n){#Generating Auto-regressive Process
vec[,i] = multiplier*vec[,i-1] + mvrnorm(1,mean,Var)
Y[i] = sum(vec[,i])
}
return(Y)
}
#Plotting sum of elements of random vectors
plot.ts(Process(0.9,mean,Cov,p,n), ylab = "Sum of process components", main = "Trace Plot")
#The distribution under study is Gamma(0.1, 0.1).
size = c(100,500,1000,5000,10000) #Sample sizes
iter = 500 #Number of iterations
coverage_freq = function(shape, rate, alpha){#function for getting coverage probability
samp = rgamma(1e4 ,shape= shape, rate= rate) #n1 samples generated from Gamma(shape, scale)
bar_x = c(mean(samp[1:1e2]),mean(samp[1:5e2]),mean(samp[1:1e3]),mean(samp[1:5e3]),mean(samp[1:1e4])) #sample mean
s2 = c(var(samp[1:1e2]), var(samp[1:5e2]), var(samp[1:1e3]),var(samp[1:5e3]),var(samp[1:1e4])) #sample variance
low_lim = bar_x - qnorm(1 - alpha/2)*sqrt(s2/size) #lower limit of CI
up_lim = bar_x + qnorm(1 - alpha/2)*sqrt(s2/size); #upper limit of CI
m = shape/rate #True mean
count = c(0,0,0,0,0) #countar variable for mean inside CI
for(i in 1:5){
if(m >= low_lim[i] & m <= up_lim[i]){
count[i] = 1
}
}
return(count)
}
prob1 = c(0,0,0,0,0) #Initializing relative frequency for inclusion of true mean
for(j in 1:iter){
prob1 = prob1 + coverage_freq(0.01,0.01,0.05)/iter
}
#bar diagram for relative frequency at different sample sizes
barplot(prob1,names.arg = size,ylim = c(0,1), xlab="Sample Size",ylab="Coverage Probability",col="blue",main="Coverage Probability of Confidence Intervals",border="red")
#The distribution under study is Gamma(0.1, 0.1).
size = c(100,500,1000,5000,10000) #Sample sizes
iter = 500 #Number of iterations
shape = 0.01 ; rate = 0.01 #Parameters
alpha = 0.05 #confidence level
coverage_freq = function(shape, rate, alpha){#function for getting coverage probability
samp = rgamma(1e4 ,shape= shape, rate= rate) #n1 samples generated from Gamma(shape, scale)
bar_x = c(mean(samp[1:1e2]),mean(samp[1:5e2]),mean(samp[1:1e3]),mean(samp[1:5e3]),mean(samp[1:1e4])) #sample mean
s2 = c(var(samp[1:1e2]), var(samp[1:5e2]), var(samp[1:1e3]),var(samp[1:5e3]),var(samp[1:1e4])) #sample variance
low_lim = bar_x - qnorm(1 - alpha/2)*sqrt(s2/size) #lower limit of CI
up_lim = bar_x + qnorm(1 - alpha/2)*sqrt(s2/size); #upper limit of CI
m = shape/rate #True mean
count = c(0,0,0,0,0) #countar variable for mean inside CI
for(i in 1:5){
if(m >= low_lim[i] & m <= up_lim[i]){
count[i] = 1
}
}
return(count)
}
prob1 = c(0,0,0,0,0) #Initializing relative frequency for inclusion of true mean
for(j in 1:iter){
prob1 = prob1 + coverage_freq(0.01,0.01,0.05)/iter
}
#bar diagram for relative frequency at different sample sizes
barplot(prob1,names.arg = size,ylim = c(0,1), xlab="Sample Size",ylab="Coverage Probability",col="blue",main="Coverage Probability of Confidence Intervals",border="red")
source("C:/Users/user/Dropbox/Coding Reproducibility/Problem_1/p1_full.R", echo=TRUE)
